MessageNotUnderstood: UndefinedObject>>+22 June 2018 7:46:38 pmVM: Win32 - a SmalltalkImageImage: Croquet1.0beta [latest update: #0]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\Users\Adam carter\Downloads\updatedCroquetSDK-1.0.25\updatedCroquetSDK-1.0.25\deploymentTrusted Dir C:\Users\Adam carter\Downloads\updatedCroquetSDK-1.0.25\updatedCroquetSDK-1.0.25\deployment\Adam carterUntrusted Dir C:\My Squeak\Adam carterUndefinedObject(Object)>>doesNotUnderstand: #+	Receiver: nil	Arguments and temporary variables: 		t1: 	+ 360@472	Receiver's instance variables: nilMessage>>sentTo:	Receiver: + 360@472	Arguments and temporary variables: 		t1: 	nil	Receiver's instance variables: 		selector: 	#+		args: 	#(360@472)		lookupClass: 	UndefinedObjectUndefinedObject(Object)>>doesNotUnderstand: #+	Receiver: nil	Arguments and temporary variables: 		t1: 	+ 360@472	Receiver's instance variables: nilMessage>>sentTo:	Receiver: + 360@472	Arguments and temporary variables: 		t1: 	nil	Receiver's instance variables: 		selector: 	#+		args: 	#(360@472)		lookupClass: 	UndefinedObject--- The full stack ---UndefinedObject(Object)>>doesNotUnderstand: #+Message>>sentTo:UndefinedObject(Object)>>doesNotUnderstand: #+Message>>sentTo: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -UndefinedObject(Object)>>doesNotUnderstand: #+BalloonRectangleMorph(Morph)>>privateMoveBy:BalloonRectangleMorph(Morph)>>privateFullMoveBy:BalloonRectangleMorph(Morph)>>position:HandMorph>>attachMorph:TheWorldMenu>>newMorphOfClass:event:[] in MenuItemMorph>>invokeWithEvent: {[(t2 := selector numArgs) = 0   ifTrue: [target perform: selector]   ifFalse...]}BlockContext>>ensure:CursorWithMask(Cursor)>>showWhile:MenuItemMorph>>invokeWithEvent:MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MenuMorph(Morph)>>processEvent:MenuMorph>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear: {[ActiveHand := self.  ActiveEvent := t1.  t4 := t2     handleFocusEvent: (t1...]}[] in PasteUpMorph>>becomeActiveDuring: {[t1 value]}BlockContext>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor: {[:t3 |  ActiveHand := t3.  t3 processEvents.  t2 := t2     or: [t3 isCapturi...]}Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in Project class>>spawnNewProcess {[[World doOneCycle.  Processor yield.  false] whileFalse.  nil]}[] in BlockContext>>newProcess {[self value.  Processor terminateActive]}